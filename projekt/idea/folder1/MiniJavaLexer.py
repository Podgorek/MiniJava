# Generated from MiniJava.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,51,322,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
        16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,
        28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,
        32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,
        43,1,43,1,43,1,44,4,44,251,8,44,11,44,12,44,252,1,44,1,44,1,45,4,
        45,258,8,45,11,45,12,45,259,1,46,1,46,4,46,264,8,46,11,46,12,46,
        265,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,
        279,8,47,1,48,1,48,1,48,4,48,284,8,48,11,48,12,48,285,1,48,1,48,
        5,48,290,8,48,10,48,12,48,293,9,48,1,48,1,48,5,48,297,8,48,10,48,
        12,48,300,9,48,3,48,302,8,48,1,48,1,48,1,48,5,48,307,8,48,10,48,
        12,48,310,9,48,3,48,312,8,48,1,49,1,49,1,49,1,49,1,50,4,50,319,8,
        50,11,50,12,50,320,0,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,
        42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,1,0,6,
        3,0,9,10,13,13,32,32,1,0,48,57,6,0,32,32,48,57,61,61,65,90,95,95,
        97,122,1,0,49,57,3,0,48,57,65,90,97,122,2,0,65,90,97,122,332,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,1,103,1,0,0,0,3,108,1,0,0,0,5,113,1,0,0,0,7,120,1,0,0,0,9,
        126,1,0,0,0,11,130,1,0,0,0,13,135,1,0,0,0,15,142,1,0,0,0,17,150,
        1,0,0,0,19,155,1,0,0,0,21,161,1,0,0,0,23,165,1,0,0,0,25,172,1,0,
        0,0,27,174,1,0,0,0,29,176,1,0,0,0,31,178,1,0,0,0,33,180,1,0,0,0,
        35,182,1,0,0,0,37,184,1,0,0,0,39,186,1,0,0,0,41,188,1,0,0,0,43,190,
        1,0,0,0,45,192,1,0,0,0,47,194,1,0,0,0,49,196,1,0,0,0,51,198,1,0,
        0,0,53,200,1,0,0,0,55,203,1,0,0,0,57,206,1,0,0,0,59,209,1,0,0,0,
        61,212,1,0,0,0,63,215,1,0,0,0,65,218,1,0,0,0,67,221,1,0,0,0,69,224,
        1,0,0,0,71,226,1,0,0,0,73,228,1,0,0,0,75,230,1,0,0,0,77,232,1,0,
        0,0,79,234,1,0,0,0,81,237,1,0,0,0,83,240,1,0,0,0,85,243,1,0,0,0,
        87,246,1,0,0,0,89,250,1,0,0,0,91,257,1,0,0,0,93,261,1,0,0,0,95,278,
        1,0,0,0,97,311,1,0,0,0,99,313,1,0,0,0,101,318,1,0,0,0,103,104,5,
        118,0,0,104,105,5,111,0,0,105,106,5,105,0,0,106,107,5,100,0,0,107,
        2,1,0,0,0,108,109,5,98,0,0,109,110,5,111,0,0,110,111,5,111,0,0,111,
        112,5,108,0,0,112,4,1,0,0,0,113,114,5,115,0,0,114,115,5,116,0,0,
        115,116,5,114,0,0,116,117,5,105,0,0,117,118,5,110,0,0,118,119,5,
        103,0,0,119,6,1,0,0,0,120,121,5,102,0,0,121,122,5,108,0,0,122,123,
        5,111,0,0,123,124,5,97,0,0,124,125,5,116,0,0,125,8,1,0,0,0,126,127,
        5,105,0,0,127,128,5,110,0,0,128,129,5,116,0,0,129,10,1,0,0,0,130,
        131,5,99,0,0,131,132,5,104,0,0,132,133,5,97,0,0,133,134,5,114,0,
        0,134,12,1,0,0,0,135,136,5,112,0,0,136,137,5,114,0,0,137,138,5,105,
        0,0,138,139,5,110,0,0,139,140,5,116,0,0,140,141,5,40,0,0,141,14,
        1,0,0,0,142,143,5,101,0,0,143,144,5,108,0,0,144,145,5,115,0,0,145,
        146,5,101,0,0,146,147,5,32,0,0,147,148,5,105,0,0,148,149,5,102,0,
        0,149,16,1,0,0,0,150,151,5,101,0,0,151,152,5,108,0,0,152,153,5,115,
        0,0,153,154,5,101,0,0,154,18,1,0,0,0,155,156,5,119,0,0,156,157,5,
        104,0,0,157,158,5,105,0,0,158,159,5,108,0,0,159,160,5,101,0,0,160,
        20,1,0,0,0,161,162,5,102,0,0,162,163,5,111,0,0,163,164,5,114,0,0,
        164,22,1,0,0,0,165,166,5,114,0,0,166,167,5,101,0,0,167,168,5,116,
        0,0,168,169,5,117,0,0,169,170,5,114,0,0,170,171,5,110,0,0,171,24,
        1,0,0,0,172,173,5,40,0,0,173,26,1,0,0,0,174,175,5,41,0,0,175,28,
        1,0,0,0,176,177,5,123,0,0,177,30,1,0,0,0,178,179,5,125,0,0,179,32,
        1,0,0,0,180,181,5,91,0,0,181,34,1,0,0,0,182,183,5,93,0,0,183,36,
        1,0,0,0,184,185,5,59,0,0,185,38,1,0,0,0,186,187,5,44,0,0,187,40,
        1,0,0,0,188,189,5,46,0,0,189,42,1,0,0,0,190,191,5,61,0,0,191,44,
        1,0,0,0,192,193,5,62,0,0,193,46,1,0,0,0,194,195,5,60,0,0,195,48,
        1,0,0,0,196,197,5,33,0,0,197,50,1,0,0,0,198,199,5,63,0,0,199,52,
        1,0,0,0,200,201,5,61,0,0,201,202,5,61,0,0,202,54,1,0,0,0,203,204,
        5,60,0,0,204,205,5,61,0,0,205,56,1,0,0,0,206,207,5,62,0,0,207,208,
        5,61,0,0,208,58,1,0,0,0,209,210,5,33,0,0,210,211,5,61,0,0,211,60,
        1,0,0,0,212,213,5,38,0,0,213,214,5,38,0,0,214,62,1,0,0,0,215,216,
        5,124,0,0,216,217,5,124,0,0,217,64,1,0,0,0,218,219,5,43,0,0,219,
        220,5,43,0,0,220,66,1,0,0,0,221,222,5,45,0,0,222,223,5,45,0,0,223,
        68,1,0,0,0,224,225,5,43,0,0,225,70,1,0,0,0,226,227,5,45,0,0,227,
        72,1,0,0,0,228,229,5,42,0,0,229,74,1,0,0,0,230,231,5,47,0,0,231,
        76,1,0,0,0,232,233,5,37,0,0,233,78,1,0,0,0,234,235,5,43,0,0,235,
        236,5,61,0,0,236,80,1,0,0,0,237,238,5,45,0,0,238,239,5,61,0,0,239,
        82,1,0,0,0,240,241,5,42,0,0,241,242,5,61,0,0,242,84,1,0,0,0,243,
        244,5,47,0,0,244,245,5,61,0,0,245,86,1,0,0,0,246,247,5,105,0,0,247,
        248,5,102,0,0,248,88,1,0,0,0,249,251,7,0,0,0,250,249,1,0,0,0,251,
        252,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,
        255,6,44,0,0,255,90,1,0,0,0,256,258,7,1,0,0,257,256,1,0,0,0,258,
        259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,92,1,0,0,0,261,263,
        5,34,0,0,262,264,7,2,0,0,263,262,1,0,0,0,264,265,1,0,0,0,265,263,
        1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,34,0,0,268,94,
        1,0,0,0,269,270,5,116,0,0,270,271,5,114,0,0,271,272,5,117,0,0,272,
        279,5,101,0,0,273,274,5,102,0,0,274,275,5,97,0,0,275,276,5,108,0,
        0,276,277,5,115,0,0,277,279,5,101,0,0,278,269,1,0,0,0,278,273,1,
        0,0,0,279,96,1,0,0,0,280,281,5,48,0,0,281,283,5,46,0,0,282,284,7,
        1,0,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,1,0,0,0,285,286,1,
        0,0,0,286,302,1,0,0,0,287,291,7,3,0,0,288,290,7,1,0,0,289,288,1,
        0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,
        0,0,0,293,291,1,0,0,0,294,298,5,46,0,0,295,297,7,1,0,0,296,295,1,
        0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,302,1,
        0,0,0,300,298,1,0,0,0,301,280,1,0,0,0,301,287,1,0,0,0,302,312,1,
        0,0,0,303,304,5,48,0,0,304,308,5,46,0,0,305,307,7,1,0,0,306,305,
        1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,312,
        1,0,0,0,310,308,1,0,0,0,311,301,1,0,0,0,311,303,1,0,0,0,312,98,1,
        0,0,0,313,314,5,39,0,0,314,315,7,4,0,0,315,316,5,39,0,0,316,100,
        1,0,0,0,317,319,7,5,0,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,
        1,0,0,0,320,321,1,0,0,0,321,102,1,0,0,0,12,0,252,259,265,278,285,
        291,298,301,308,311,320,1,6,0,0
    ]

class MiniJavaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    LPAREN = 13
    RPAREN = 14
    LBRACE = 15
    RBRACE = 16
    LBRACK = 17
    RBRACK = 18
    SEMICOLON = 19
    COMMA = 20
    DOT = 21
    ASSIGN = 22
    GT = 23
    LT = 24
    NOT = 25
    QUESTION = 26
    EQUAL = 27
    LE = 28
    GE = 29
    NOTEQUAL = 30
    AND = 31
    OR = 32
    INC = 33
    DEC = 34
    ADD = 35
    SUB = 36
    MUL = 37
    DIV = 38
    MOD = 39
    ADD_ASSIGN = 40
    SUB_ASSIGN = 41
    MUL_ASSIGN = 42
    DIV_ASSIGN = 43
    IF = 44
    WS = 45
    INT = 46
    STRING = 47
    BOOL = 48
    FLOAT = 49
    CHAR = 50
    VARIABLE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'void'", "'bool'", "'string'", "'float'", "'int'", "'char'", 
            "'print('", "'else if'", "'else'", "'while'", "'for'", "'return'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
            "'='", "'>'", "'<'", "'!'", "'?'", "'=='", "'<='", "'>='", "'!='", 
            "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'+='", "'-='", "'*='", "'/='", "'if'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", 
            "SEMICOLON", "COMMA", "DOT", "ASSIGN", "GT", "LT", "NOT", "QUESTION", 
            "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
            "ADD", "SUB", "MUL", "DIV", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
            "MUL_ASSIGN", "DIV_ASSIGN", "IF", "WS", "INT", "STRING", "BOOL", 
            "FLOAT", "CHAR", "VARIABLE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMICOLON", "COMMA", 
                  "DOT", "ASSIGN", "GT", "LT", "NOT", "QUESTION", "EQUAL", 
                  "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", 
                  "SUB", "MUL", "DIV", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MUL_ASSIGN", "DIV_ASSIGN", "IF", "WS", "INT", "STRING", 
                  "BOOL", "FLOAT", "CHAR", "VARIABLE" ]

    grammarFileName = "MiniJava.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


